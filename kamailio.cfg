#!KAMAILIO

#!define WITH_AUTH
#!define WITH_NAT
#!define WITH_DIALPLAN

# Configuración general
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"
debug=2
log_stderror=yes

# Parámetros básicos
listen=udp:0.0.0.0:5060
listen=tcp:0.0.0.0:5060

# Módulos requeridos
loadmodule "tm.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "mi_rpc.so"
loadmodule "acc.so"
loadmodule "auth.so"
loadmodule "auth_db.so"
loadmodule "uac.so"
loadmodule "uac_auth.so"
loadmodule "dialog.so"
loadmodule "dialplan.so"
loadmodule "dispatcher.so"
loadmodule "nathelper.so"
loadmodule "topoh.so"
loadmodule "textopsx.so"
loadmodule "kex.so"

# Configuración de módulos
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("rr", "enable_full_lr", 1)
modparam("rr", "append_fromtag", 1)

# Dialplan para transformación de números
modparam("dialplan", "db_url", "NONE")
modparam("dialplan", "attrs_pvar", "$avp(s:dest)")
modparam("dialplan", "dpid_col", "dpid")

# Definir reglas de dialplan
modparam("dialplan", "table_name", "dialplan")

# Configuración UAC para registro con el proveedor
modparam("uac", "auth_username_avp", "$avp(auser)")
modparam("uac", "auth_password_avp", "$avp(apass)")
modparam("uac", "reg_contact_addr", "100.20.5.228:5060")
modparam("uac", "reg_db_url", "NONE")

# Iniciar transacciones
request_route {
    # Verificación básica
    if (!mf_process_maxfwd_header("10")) {
        sl_send_reply("483", "Too Many Hops");
        exit;
    }

    if (!sanity_check()) {
        xlog("L_WARN", "Mensaje malformado desde $si:$sp\n");
        exit;
    }

    # Record-Route para todas las solicitudes
    if (has_totag()) {
        if (loose_route()) {
            route(RELAY);
        } else {
            sl_send_reply("404", "Not Found");
        }
        exit;
    }

    # Handle REGISTER de Retell AI
    if (is_method("REGISTER")) {
        # Solo aceptar registros desde Retell AI
        if ($si == "100.20.5.228") {
            save("location");
            exit;
        } else {
            sl_send_reply("403", "Forbidden");
            exit;
        }
    }

    # Handle registro con Telintec
    if (is_method("REGISTER") && uri=~".*voipi.telintec.net.ar.*") {
        $avp(auser) = "3449003464";
        $avp(apass) = "%(qCK9vk";
        uac_reg_request("register_telintec", "voipi.telintec.net.ar", "5060", 
            "sip:3449003464@voipi.telintec.net.ar", "600");
        exit;
    }

    # Procesar solicitudes INVITE (llamadas salientes)
    if (is_method("INVITE")) {
        # Verificar origen (solo aceptar llamadas de Retell AI)
        if ($si != "100.20.5.228") {
            sl_send_reply("403", "Forbidden");
            exit;
        }

        # Obtener número de destino
        $var(dest_num) = $rU;
        xlog("L_INFO", "Número original: $var(dest_num)\n");

        # Transformación de números según reglas de Telintec
        if ($var(dest_num) =~ "^011[0-9]+$") {
            # Llamadas urbanas AMBA
            $var(dest_num) = "5411" + $(var(dest_num){s.substr,3});
            xlog("L_INFO", "Número transformado (AMBA): $var(dest_num)\n");
        } else if ($var(dest_num) =~ "^0[0-9]{2,4}[0-9]+$") {
            # Llamadas LDN (eliminar 0 inicial)
            $var(dest_num) = "54" + $(var(dest_num){s.substr,1});
            xlog("L_INFO", "Número transformado (LDN): $var(dest_num)\n");
        } else if ($var(dest_num) =~ "^[0-9]{2,4}15[0-9]+$") {
            # Celulares con 15
            $var(area) = $(var(dest_num){re.subst,/^([0-9]{2,4})15([0-9]+)$/\1/g});
            $var(num) = $(var(dest_num){re.subst,/^([0-9]{2,4})15([0-9]+)$/\2/g});
            $var(dest_num) = "54" + $var(area) + "15" + $var(num);
            xlog("L_INFO", "Número transformado (Celular): $var(dest_num)\n");
        }

        # Actualizar URI de solicitud con número transformado
        $rU = $var(dest_num);

        # Configurar cabeceras SIP para Telintec
        uac_replace_from("3449003464", "voipi.telintec.net.ar");
        uac_replace_from_uri("sip:3449003464@voipi.telintec.net.ar");
        
        # Actualizar destino a Telintec
        $du = "sip:$rU@voipi.telintec.net.ar:5060";
        
        # Reenviar la solicitud
        route(RELAY);
        exit;
    }

    # Manejar otras solicitudes
    if (is_method("BYE") || is_method("CANCEL")) {
        route(RELAY);
        exit;
    }

    if (is_method("OPTIONS")) {
        sl_send_reply("200", "OK");
        exit;
    }

    # Rechazar solicitudes no manejadas
    sl_send_reply("404", "Not Found");
    exit;
}

# Ruta para reenvío de solicitudes
route[RELAY] {
    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

# Evento para registro con Telintec
event_route[uac:register] {
    if ($uac.reg.status == "200") {
        xlog("L_INFO", "Registro exitoso con Telintec\n");
    } else {
        xlog("L_ERR", "Error de registro con Telintec: $uac.reg.status\n");
    }
}
